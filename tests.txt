
julia> R, (u,v,w,x,y,z) = polynomial_ring(ZZ,["u","v","w","x","y","z"])
(Multivariate polynomial ring in 6 variables over ZZ, ZZMPolyRingElem[u, v, w, x, y, z])

julia> QuasiFSplitness.isFSplit(2,x^2 + y^2 + x*y)
true

julia> QuasiFSplitness.isFSplit(3,x^2 + y^2 + x*y)
true

julia> QuasiFSplitness.isFSplit(3,x^2 + y^2)
true

julia> QuasiFSplitness.isFSplit(3,x^3 + y^2 + z^2 + w^2 + v^2 + u^2)
true

julia> QuasiFSplitness.isFSplit(3,x^3 + y^3 + z^3 + w^3 + v^3 + u^3)
false

julia> QuasiFSplitness.isFSplit(5,x^5 + y^5 + z^5 + w^5 + v^5 + u^5)
false

julia> QuasiFSplitness.isFSplit(5,x^3 + y^3 + z^3)
false

julia> QuasiFSplitness.isFSplit(7,x^3 + y^3 + z^3)
true

julia> QuasiFSplitness.isFSplit(11,x^3 + y^3 + z^3)
false

julia> QuasiFSplitness.isFSplit(13,x^3 + y^3 + z^3)
true

julia> QuasiFSplitness.isFSplit(17,x^3 + y^3 + z^3)
false

julia> QuasiFSplitness.isFSplit(19,x^3 + y^3 + z^3)
true

julia> QuasiFSplitness.isFSplit(23,x^3 + y^3 + z^3)
false

julia>

julia> R, (u,v,w,x,y,z) = polynomial_ring(ZZ,["u","v","w","x","y","z"])
(Multivariate polynomial ring in 6 variables over ZZ, ZZMPolyRingElem[u, v, w, x, y, z])

julia> QuasiFSplitness.polynomial_frobenius_splitting(5,x^2 * y^3 * z + x^3 * y^2 * z^2 + x^8 * y^7 * z^7,[0,0,0,2,3,1])
1

julia> QuasiFSplitness.polynomial_frobenius_splitting(5,x^2 * y^3 * z + x^3 * y^2 * z^2 + x^8 * y^7 * z^7,[0,0,0,3,2,2])
x*y*z + 1

julia> QuasiFSplitness.polynomial_frobenius_splitting(5,x^2 * y^3 * z + x^3 * y^2 * z^2 + x^8 * y^2 * z^2,[0,0,0,3,2,2])
x + 1

julia> QuasiFSplitness.polynomial_frobenius_generator(5,x^2 + x^4*y^4*z^9*u^4*v^4*w^4)
z

# THE EXAMPLES FROM 2204.10076
a> p = 3
3

julia> R, (w,x,y,z) = polynomial_ring(GF(p),["w","x","y","z"])
(Multivariate polynomial ring in 4 variables over GF(3), fpMPolyRingElem[w, x, y, z])

julia> f1 = x^4 + y^4 + z^4 + 2w^4 + x^2*y*w + y*z^2*w
2*w^4 + w*x^2*y + w*y*z^2 + x^4 + y^4 + z^4

julia> f2 = x^4 + 2y^4 + 2z^4 + 2w^4 + x*y*z^2
2*w^4 + x^4 + x*y*z^2 + 2*y^4 + 2*z^4

julia> f3 = x^4 + y^4 + z^4 + w^4 + x^2*z^2 + x*y*z^2 + z^3*w
w^4 + w*z^3 + x^4 + x^2*z^2 + x*y*z^2 + y^4 + z^4

julia> f4 = x^4 + y^4 + z^4 + w^4 + x^2*z^2 + x*y*z^2
w^4 + x^4 + x^2*z^2 + x*y*z^2 + y^4 + z^4

julia> f5 = x^4 + y^4 + z^4 + w^4 + x^3*z + z^3*w + y*z^2*w + y*z*w^2
w^4 + w^2*y*z + w*y*z^2 + w*z^3 + x^4 + x^3*z + y^4 + z^4

julia> f6 = x^4 + y^4 + z^4 + w^4 + x^2*z^2 + x^2*y*z + x*z^3
w^4 + x^4 + x^2*y*z + x^2*z^2 + y^4 + z^4

julia> f7 = x^4 + y^4 + z^4 + w^4 + x*y^2*z + x*z^2*w + y*z^2*w + y*z*w^2
w^4 + w^2*y*z + w*x*z^2 + w*y*z^2 + x^4 + x*y^2*z + y^4 + z^4

julia> f8 = x^4 + x^2*y*z + x^2*y*w + 2x^2*z^2 + x*y*w^2 + 2*y^4 + y^3*w + z^4 + w^4
w^4 + w^2*x*y + w*x^2*y + w*y^3 + x^4 + x^2*y*z + 2*x^2*z^2 + 2*y^4 + z^4

julia> f9 = x^4 + y^4 + z^4 + w^4 + x*y^3 + y^3*w + z^2*w^2 + 2*x*y*z^2 + y*z*w^2
w^4 + w^2*y*z + w^2*z^2 + w*y^3 + x^4 + x*y^3 + 2*x*y*z^2 + y^4 + z^4

julia> f10 = x^4 + 2*x^2*y*z + x^2*y*w + x*y^2*w + y^4 + y^3*w + y^2*z^2 + 2*y^2*z*w + y^2*w^2 + y*z^3 + y*z^2*w + y*z*w^2 + z^4 + z*w^3
w^3*z + w^2*y^2 + w^2*y*z + w*x^2*y + w*x*y^2 + w*y^3 + 2*w*y^2*z + w*y*z^2 + x^4 + 2*x^2*y*z + y^4 + y^2*z^2 + y*z^3 + z^4

julia> finfty = x^4 + y^4 + z^4 + w^4
w^4 + x^4 + y^4 + z^4

julia> fm10 = 2w^4 + x*w^3 + w^2*x^2 + w^2*x*y + w^2*y*z + 2w*x^3 + 2w*x^2*y + w*x*y^2 + w*x*y*z + w*x*z^2 + w*y^3 + 2w*y^2*z + w*y*z^2 + x^4 + 2*x^3*y + x^2*y*z + x^2*z^2 + x*y^3 + x*y^2*z + 2x*y*z^2 + x*z^3 + 2*y^4 + 2*y^3*z + y^2*z^2 + y*z^3 + 2*z^4

julia> fr8 = x1^3*x2 + 2*x1^2*x2^2 + 2*x1^2*x2*x3 + x1^2*x3^2 + x1^2*x3*x4 + 2*x1*x2^2*x3 + 2*x1*x2^2*x4 + 2*x1*x2*x3*x4 + 2*x1*x3^3 + 2*x1*x3^2*x4 + x1*x3*x4^2 + 2*x1*x4^3 + x2^4 + x2^3*x3 + 2*x2^3*x4 + x2^2*x3^2 + 2*x2*x3^3 + x2*x3^2*x4 + x2*x3*x4^2 + x2*x4^3 + x3^4 + x3^2*x4^2 + x3*x4^3

julia> p = 2
2

julia> R, (u,w,x,y,z) = polynomial_ring(GF(p),["u","w","x","y","z"])
(Multivariate polynomial ring in 5 variables over GF(2), fpMPolyRingElem[u, w, x, y, z])

julia> f60 = x^5 + y^5 + z^5 + w^5 + u^5 + x*z^3*w + y*z*w^3 + x^2*z*u^2 + y^2*z^2*w + x*y^2*w*u + y*z*w*u^2


